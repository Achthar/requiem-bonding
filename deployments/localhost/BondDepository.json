{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_req",
          "type": "address"
        },
        {
          "internalType": "contract IgREQ",
          "name": "_greq",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldControlVariable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newControlVariable",
          "type": "uint256"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_sendgREQ",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_sendgREQ",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe83f76edaffa89a9fa1da140441d96ee8ea9091737a8d70de2939595cee29530",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "4391645",
    "logsBloom": "0x
    "blockHash": "0x08db706693ec3b26efd1787469f807d4344dad53dee98f125e9c4d00234d3499",
    "transactionHash": "0xe83f76edaffa89a9fa1da140441d96ee8ea9091737a8d70de2939595cee29530",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 37,
        "transactionHash": "0xe83f76edaffa89a9fa1da140441d96ee8ea9091737a8d70de2939595cee29530",
        "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000009635f643e140090a9a8dcd712ed6285858cebef"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x08db706693ec3b26efd1787469f807d4344dad53dee98f125e9c4d00234d3499"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 37,
        "transactionHash": "0xe83f76edaffa89a9fa1da140441d96ee8ea9091737a8d70de2939595cee29530",
        "address": "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000851356ae760d987e095750cceb3bc6014560891c",
          "0x000000000000000000000000c5a5c42992decbae36851359345fe25997f5c42d"
        ],
        "data": "0x0000000000000000000002ac3a4edbbfb8014e3ba83411e915e8000000000000",
        "logIndex": 1,
        "blockHash": "0x08db706693ec3b26efd1787469f807d4344dad53dee98f125e9c4d00234d3499"
      }
    ],
    "blockNumber": 37,
    "cumulativeGasUsed": "4391645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
    "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "0xc5a5C42992dECbae36851359345FE25997F5C42d",
    "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8"
  ],
  "solcInputHash": "c0cfa8d94787ec555e3e51d99860a7c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_req\",\"type\":\"address\"},{\"internalType\":\"contract IgREQ\",\"name\":\"_greq\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldControlVariable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newControlVariable\",\"type\":\"uint256\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_sendgREQ\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendgREQ\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeus, Indigo Review by: JeffX\",\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in REQ or quote), initial price / REQ (18 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in REQ decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in REQ decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of gREQ due\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in REQ decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = req decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of REQ to be paid in REQ decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gREQ\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_sendgREQ\":\"send payout as gREQ or sREQ\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in gREQ\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_sendgREQ\":\"send payout as gREQ or sREQ\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gREQ\"}}},\"title\":\"Requiem Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"BondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999999},\"remappings\":[]},\"sources\":{\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport \\\"./libraries/types/NoteKeeper.sol\\\";\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n// solhint-disable  max-line-length\\n\\n/// @title Requiem Bond Depository\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract BondDepository is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n    event Tuned(uint256 indexed id, uint256 oldControlVariable, uint256 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IAuthority _authority,\\n        IERC20 _req,\\n        IgREQ _greq,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _req, _greq, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _req.approve(address(_staking), 1e51);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return payout_     the amount of gREQ due\\n     * @return expiry_     the timestamp at which payout is redeemable\\n     * @return index_      the user index of the Note (used to redeem or query information)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = REQ out\\n         * amount = quote tokens in\\n         * price = quote tokens : req (i.e. 42069 DAI : REQ)\\n         *\\n         * 1e18 = REQ decimals + price decimals\\n         */\\n        payout_ = ((_amount * 10**(2 * req.decimals())) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of REQ that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much REQ has been sold\\n        market.purchased += _amount;\\n        market.sold += payout_;\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += payout_;\\n\\n        emit Bond(_id, _amount, price);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        index_ = addNote(_user, payout_, uint48(expiry_), uint48(_id), _referral);\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint256 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= adjustBy;\\n                adjustment.timeToAdjusted -= secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // req decimals + price decimals\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * (10**(2 * req.decimals()))) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 REQ. max payout would be 1,000 REQ (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint256((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint256 newControlVariable = uint256((price * treasury.baseSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint256 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in REQ or quote), initial price / REQ (18 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = req decimals (x) + initial price decimals (18)\\n         */\\n        uint256 targetDebt = uint256(_booleans[0] ? ((_market[0] * (10**(2 * req.decimals()))) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 REQ, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 REQ.\\n         */\\n        uint256 maxPayout = uint256((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * treasury.baseSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                controlVariable: controlVariable,\\n                maxDebt: maxDebt\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(req), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in REQ decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of REQ to be paid in REQ decimals\\n     *\\n     * @dev 1e18 = req decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 10**(2 * req.decimals())) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in REQ decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return (markets[_id].totalDebt * secondsSince) / meta.length;\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in REQ decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        (uint256 decay, , ) = _controlDecay(_id);\\n        return terms[_id].controlVariable - decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in REQ decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return decay_           change in control variable\\n     * @return secondsSince_    seconds since last change in control variable\\n     * @return active_          whether or not change remains active\\n     */\\n    function _controlDecay(uint256 _id)\\n        internal\\n        view\\n        returns (\\n            uint256 decay_,\\n            uint48 secondsSince_,\\n            bool active_\\n        )\\n    {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return (0, 0, false);\\n\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        active_ = secondsSince_ < info.timeToAdjusted;\\n        decay_ = active_ ? (info.change * secondsSince_) / info.timeToAdjusted : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x1db825ea26e2dbb3ca18ae8b680dae3c0923ecda92a72247bafe72296e142a2b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xcf9183e328685c9d4eb47d374877363f8d84e5b8be528b0b6299eb8b54178d17\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xec988a6ff5da4cdef6378a3f8320e39027f557912ba73c92004a467d8a6cd5fe\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd2f9dee40b880fa050fe8c533b4ee0abc8fc820366a322700882677fdbb48f7a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n  // Info about each type of market\\n  struct Market {\\n    uint256 capacity; // capacity remaining\\n    IERC20 quoteToken; // token to accept as payment\\n    bool capacityInQuote; // capacity limit is in payment token (true) or in REQ (false, default)\\n    uint256 totalDebt; // total debt from market\\n    uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    uint256 sold; // base tokens out\\n    uint256 purchased; // quote tokens in\\n  }\\n\\n  // Info for creating new markets\\n  struct Terms {\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint256 controlVariable; // scaling variable for price\\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    uint256 maxDebt; // 18 decimal debt maximum in REQ\\n  }\\n\\n  // Additional info about market.\\n  struct Metadata {\\n    uint48 lastTune; // last timestamp when control variable was tuned\\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n    uint48 depositInterval; // target frequency of deposits\\n    uint48 tuneInterval; // frequency of tuning\\n    uint8 quoteDecimals; // decimals of quote token\\n  }\\n\\n  // Control variable adjustment data\\n  struct Adjustment {\\n    uint256 change;\\n    uint48 lastAdjustment;\\n    uint48 timeToAdjusted;\\n    bool active;\\n  }\\n\\n  /**\\n   * @notice deposit market\\n   * @param _bid uint256\\n   * @param _amount uint256\\n   * @param _maxPrice uint256\\n   * @param _user address\\n   * @param _referral address\\n   * @return payout_ uint256\\n   * @return expiry_ uint256\\n   * @return index_ uint256\\n   */\\n  function deposit(\\n    uint256 _bid,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  )\\n    external\\n    returns (\\n      uint256 payout_,\\n      uint256 expiry_,\\n      uint256 index_\\n    );\\n\\n  function create(\\n    IERC20 _quoteToken, // token used to deposit\\n    uint256[3] memory _market, // [capacity, initial price]\\n    bool[2] memory _booleans, // [capacity in quote, fixed term]\\n    uint256[2] memory _terms, // [vesting, conclusion]\\n    uint32[2] memory _intervals // [deposit interval, tune interval]\\n  ) external returns (uint256 id_);\\n\\n  function close(uint256 _id) external;\\n\\n  function isLive(uint256 _bid) external view returns (bool);\\n\\n  function liveMarkets() external view returns (uint256[] memory);\\n\\n  function liveMarketsFor(address _quoteToken)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  function payoutFor(uint256 _amount, uint256 _bid)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n  function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n  function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n  function debtDecay(uint256 _bid) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaad47f713a3978a774e81bba4cf30765ff2817ccce8fddf508a2181d6ab39ff\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gREQ remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgREQ\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _sendgREQ) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0x772d05e0b473278a37023e3505844d48bab82b7682638a0d431d1167b697f2b4\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x526f1551a178337563eaa0eb935d04d21bfe938cdade9c78b654a08e86c2e9b0\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IgREQ.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IgREQ is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sREQ) external;\\n}\\n\",\"keccak256\":\"0xc336a7ae1852a0f3ea695cfe6781677b3ecf673147cb73a0471b178be692c875\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      \\\"SAFE_ERC20_CALL_FAILED\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x34e0bbbab0278f4a431bb41107ea4ca8cadc0601da8f58e18b217fbbc3769a73\",\"license\":\"MIT\"},\"contracts/libraries/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.5;\\n\\nimport \\\"../../interfaces/IAuthority.sol\\\";\\n\\nabstract contract AccessControlled {\\n  /* ========== EVENTS ========== */\\n\\n  event AuthorityUpdated(IAuthority indexed authority);\\n\\n  string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IAuthority public authority;\\n\\n  /* ========== Constructor ========== */\\n\\n  constructor(IAuthority _authority) {\\n    authority = _authority;\\n    emit AuthorityUpdated(_authority);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier onlyGovernor() {\\n    require(msg.sender == authority.governor(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyPolicy() {\\n    require(msg.sender == authority.policy(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyVault() {\\n    require(msg.sender == authority.vault(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  /* ========== GOV ONLY ========== */\\n\\n  function setAuthority(IAuthority _newAuthority) external onlyGovernor {\\n    authority = _newAuthority;\\n    emit AuthorityUpdated(_newAuthority);\\n  }\\n}\\n\",\"keccak256\":\"0xaf8b9d248a1aab3e858a0efc1f70126b26b308793cb519347c8cd0bbb1ba7e99\",\"license\":\"MIT\"},\"contracts/libraries/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./AccessControlled.sol\\\";\\nimport \\\"../../interfaces/ERC20/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is AccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n    IERC20 internal immutable req; // reward token\\n\\n    constructor(IAuthority _authority, IERC20 _req) AccessControlled(_authority) {\\n        req = _req;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        req.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n}\\n\",\"keccak256\":\"0x8d95cb1df1a522840244a412a0d960b64e1e0047bdf3460ebb915eec797d0c61\",\"license\":\"MIT\"},\"contracts/libraries/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FrontEndRewarder.sol\\\";\\n\\nimport \\\"../../interfaces/IgREQ.sol\\\";\\nimport \\\"../../interfaces/IStaking.sol\\\";\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\nimport \\\"../../interfaces/INoteKeeper.sol\\\";\\n\\n// solhint-disable max-line-length\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgREQ internal immutable gREQ;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IAuthority _authority,\\n        IERC20 _req,\\n        IgREQ _greq,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _req) {\\n        gREQ = _greq;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of REQ due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gREQ.balanceTo(_payout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        // note that only the payout gets staked (front end rewards are in REQ)\\n        staking.stake(address(this), _payout, false, true);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _sendgREQ    send payout as gREQ or sREQ\\n     * @return payout_     sum of payout sent, in gREQ\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgREQ\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_sendgREQ) {\\n            gREQ.transfer(_user, payout_); // send payout as gREQ\\n        } else {\\n            staking.unwrap(_user, payout_); // unwrap and send payout as sREQ\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _sendgREQ    send payout as gREQ or sREQ\\n     * @return             sum of payout sent, in gREQ\\n     */\\n    function redeemAll(address _user, bool _sendgREQ) external override returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _sendgREQ);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gREQ\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5136a99045a2e4e3f29fbf25b43e7ab173a992f0e1dbfbf7dda751ae22d94acd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c8063abbf4b171161012a578063c9b67af5116100bd578063e0b117ff1161008c578063e481b26511610071578063e481b2651461066d578063f1b7dc7814610680578063f3191a461461069357600080fd5b8063e0b117ff146105ce578063e3684e391461061657600080fd5b8063c9b67af51461057d578063d62fbdd314610585578063d6db4df814610598578063d936547e146105ab57600080fd5b8063bf7e214f116100f9578063bf7e214f146104b5578063c0680e20146104fa578063c0aa0e8a1461050d578063c3e0fb1c1461055557600080fd5b8063abbf4b17146103a8578063b1283e77146103bb578063bc3b2b121461041e578063bcb29667146104a257600080fd5b806346aed74e116101bd5780637a9e5e4b1161018c5780639b19251a116101715780639b19251a1461037a5780639c7697871461038d578063a42206101461039557600080fd5b80637a9e5e4b146103395780637c770aae1461034c57600080fd5b806346aed74e146102e057806364914439146102f3578063654e51e7146103135780636a6c575d1461032657600080fd5b806321a7d29b116101f957806321a7d29b1461028f57806327507458146102a25780633adec5a7146102c55780633d18b912146102d857600080fd5b80630700037d1461022b5780630a9d85eb1461025e5780630aebeb4e146102715780631885f58014610286575b600080fd5b61024b61023936600461439e565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61024b61026c3660046143bb565b61069c565b61028461027f3660046143bb565b6106e3565b005b61024b60025481565b61024b61029d366004614595565b610880565b6102b56102b03660046143bb565b6110a9565b6040519015158152602001610255565b61024b6102d33660046143bb565b61111d565b610284611194565b61024b6102ee366004614656565b611266565b61030661030136600461439e565b61127b565b604051610255919061468f565b6102846103213660046146d3565b611417565b61024b6103343660046146d3565b61151c565b61028461034736600461439e565b6116d4565b61035f61035a3660046146f5565b61183d565b60408051938452602084019290925290820152606001610255565b61028461038836600461439e565b611ce5565b610284611e33565b61024b6103a336600461474b565b6121bc565b61024b6103b63660046143bb565b612531565b6103ce6103c93660046143bb565b61264e565b6040805197885273ffffffffffffffffffffffffffffffffffffffff9096166020880152931515948601949094526060850191909152608084015260a083019190915260c082015260e001610255565b61047161042c3660046143bb565b600c602052600090815260409020805460019091015465ffffffffffff8082169166010000000000008104909116906c01000000000000000000000000900460ff1684565b604051610255949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b61024b6104b03660046143bb565b6126c9565b6001546104d59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610255565b61024b61050836600461474b565b612703565b61052061051b3660046143bb565b612734565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a001610255565b61056861056336600461474b565b612789565b60408051928352901515602083015201610255565b61030661287c565b61024b610593366004614777565b612965565b6102846105a636600461474b565b612bd7565b6102b56105b936600461439e565b60056020526000908152604090205460ff1681565b6105e16105dc36600461474b565b612cd9565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610255565b6106296106243660046143bb565b612d57565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610255565b61030661067b36600461439e565b612e00565b61024b61068e3660046143bb565b61304d565b61024b60035481565b6000806106a883613139565b5050905080600a84815481106106c0576106c0614842565b9060005260206000209060040201600101546106dc91906148a0565b9392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077491906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc91906148d4565b60405180910390fd5b5042600a82815481106107fa576107fa614842565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff16021790555060006009828154811061084257610842614842565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b600154604080517f0505c8c9000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691630505c8c99160048083019260209291908290030181865afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091491906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161460009061097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc91906148d4565b5060208301516000906109909042906148a0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0391906149b2565b60ff169050600086816020020151610a1c578751610af4565b610a2782600a614af5565b88600160200201517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906149b2565b610ac9906002614b01565b610ad490600a614b22565b8a51610ae09190614b31565b610aea9190614b6e565b610af49190614b6e565b85519091506000908490610b0e9063ffffffff1684614b31565b610b189190614b6e565b90506000620186a08a60026020020151610b329085614b31565b610b3c9190614b6e565b610b469084614ba9565b9050600083600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190614bc1565b60208d0151610beb9190614b31565b610bf59190614b6e565b600980546040805160e0810190915290995091925090808d6000602002015181526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018c600060028110610c4857610c48614842565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9093169290921791909117905585810151600283015593850151600382015560a080860151600483015560c090950151600590910155805193840181528e820151151584529083018590528c5165ffffffffffff1690830152600a92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600181810186556000958652828620855160049093020180549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092178255848301519082015560408085015160028301805460608089015188166601000000000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090921693881693909317179055608090950151600390920191909155805160c08101825242841680825292810192909252918a1691810191909152600b9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600d60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e60016003811061107e5761107e614842565b602002015160405161109291815260200190565b60405180910390a450505050505095945050505050565b6000600982815481106110be576110be614842565b906000526020600020906006020160000154600014158015611117575042600a83815481106110ef576110ef614842565b60009182526020909120600490910201600201546601000000000000900465ffffffffffff16115b92915050565b6000600b828154811061113257611132614842565b60009182526020909120015461116e907e01000000000000000000000000000000000000000000000000000000000000900460ff16600a614b22565b6111778361304d565b6111808461069c565b61118a9190614b31565b6111179190614b6e565b3360008181526004602081905260408083208054939055517fa9059cbb00000000000000000000000000000000000000000000000000000000815290810192909252602482018190529073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561123e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112629190614bda565b5050565b60006106dc8361127585612e00565b84612965565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260408083208054825181850281018501909352808352606094938301828280156112e757602002820191906000526020600020905b8154815260200190600101908083116112d3575b50505050509050600080600090505b82518110156113465761132183828151811061131457611314614842565b60200260200101516110a9565b15611334578161133081614bf7565b9250505b8061133e81614bf7565b9150506112f6565b5060008167ffffffffffffffff811115611362576113626143d4565b60405190808252806020026020018201604052801561138b578160200160208202803683370190505b5090506000805b845181101561140c576113b085828151811061131457611314614842565b156113fa578481815181106113c7576113c7614842565b60200260200101518383815181106113e1576113e1614842565b6020908102919091010152816113f681614bf7565b9250505b8061140481614bf7565b915050611392565b509095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a891906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090611510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc91906148d4565b50600391909155600255565b600080600b838154811061153257611532614842565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352660100000000000082048116948301949094526c010000000000000000000000008104841692820192909252720100000000000000000000000000000000000082048316606082015278010000000000000000000000000000000000000000000000008204909216608083015260ff7e010000000000000000000000000000000000000000000000000000000000009091041660a0820181905290915061160090600a614b22565b6116098461111d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169891906149b2565b6116a3906002614b01565b6116ae90600a614b22565b6116b89087614b31565b6116c29190614b6e565b6116cc9190614b6e565b949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176591906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906117cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc91906148d4565b50600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6000806000806009898154811061185657611856614842565b906000526020600020906006020190506000600a8a8154811061187b5761187b614842565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252660100000000000090048116606083018190526003909301546080830152909250429190821610611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107dc565b61195a8b82613227565b60006119658c613417565b9050898111156119d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107dc565b600b8c815481106119e4576119e4614842565b600091825260209091200154611a20907e01000000000000000000000000000000000000000000000000000000000000900460ff16600a614b22565b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab091906149b2565b611abb906002614b01565b611ac690600a614b22565b611ad0908e614b31565b611ada9190614b6e565b611ae49190614b6e565b96508360030154871115611b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107dc565b600184015474010000000000000000000000000000000000000000900460ff16611b7e5786611b80565b8a5b846000016000828254611b9391906148a0565b90915550508251611ba8578260400151611bb8565b818360400151611bb89190614c2f565b65ffffffffffff1695508a846005016000828254611bd69190614ba9565b9250508190555086846004016000828254611bf19190614ba9565b9250508190555086846002016000828254611c0c9190614ba9565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a2611c598988888f8c6134a0565b6008546001860154919650611c8a9173ffffffffffffffffffffffffffffffffffffffff908116913391168e613812565b836002015483608001511015611ccc5760008085556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611cd6565b611cd68c836138ad565b50505050955095509592505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090611dde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc91906148d4565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec491906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611fb85750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8991906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061207e5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561202b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204f91906148b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107dc565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217591906148b7565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526007602090815260408083208584529091528120549091163314612259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107dc565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040902080548390811061229057612290614842565b60009182526020909120600290910201600101546c01000000000000000000000000900465ffffffffffff1615612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107dc565b5033600090815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff861684529190922080549192918490811061236857612368614842565b60009182526020808320845460018181018755958552828520600294850290920180549190940290910190815591840180549290940180547fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000811665ffffffffffff948516908117835586546601000000000000908190048616027fffffffffffffffffffffffffffffffffffffffff000000000000000000000000909216171780825585546c01000000000000000000000000908190048516027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff82168117835595547201000000000000000000000000000000000000908190049094169093027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9095167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9093169290921793909317905573ffffffffffffffffffffffffffffffffffffffff851681526006909152604090208054839081106124f0576124f0614842565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600b838154811061254757612547614842565b600091825260208083206040805160c081018252939091015465ffffffffffff80821685526601000000000000820481169385018490526c01000000000000000000000000820481169285019290925272010000000000000000000000000000000000008104821660608501527801000000000000000000000000000000000000000000000000810490911660808401527e01000000000000000000000000000000000000000000000000000000000000900460ff1660a083015290925061260f90426148a0565b9050816040015165ffffffffffff16816009868154811061263257612632614842565b9060005260206000209060060201600201546116c29190614b31565b6009818154811061265e57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955073ffffffffffffffffffffffffffffffffffffffff8316947401000000000000000000000000000000000000000090930460ff16939192909187565b60006126d482612531565b600983815481106126e7576126e7614842565b90600052602060002090600602016002015461111791906148a0565b600d602052816000526040600020818154811061271f57600080fd5b90600052602060002001600091509150505481565b600a818154811061274457600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff808216926601000000000000909204169085565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260408120805482918291859081106127c4576127c4614842565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552660100000000000081048516928401929092526c010000000000000000000000008204841660608401819052720100000000000000000000000000000000000090920490931660808301529194509150158015612866575042816040015165ffffffffffff1611155b80156128725750805115155b9150509250929050565b60606000805b6009548110156128ba57612895816110a9565b156128a857816128a481614bf7565b9250505b806128b281614bf7565b915050612882565b5060008167ffffffffffffffff8111156128d6576128d66143d4565b6040519080825280602002602001820160405280156128ff578160200160208202803683370190505b5090506000805b60095481101561295c57612919816110a9565b1561294a578083838151811061293157612931614842565b60209081029190910101528161294681614bf7565b9250505b8061295481614bf7565b915050612906565b50909392505050565b600042815b8451811015612a4e576000806129998888858151811061298c5761298c614842565b6020026020010151612789565b915091508015612a395773ffffffffffffffffffffffffffffffffffffffff8816600090815260066020526040902087518591908990869081106129df576129df614842565b6020026020010151815481106129f7576129f7614842565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612a369190614ba9565b94505b50508080612a4690614bf7565b91505061296a565b508215612b14576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0e9190614bda565b50612bcf565b6040517f39f4769300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af1158015612ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcd9190614bc1565b505b509392505050565b336000908152600660205260409020805482908110612bf857612bf8614842565b6000918252602082206001600290920201015465ffffffffffff169003612c7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107dc565b3360009081526007602090815260408083209383529290522080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60066020528160005260406000208181548110612cf557600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250660100000000000082048116916c01000000000000000000000000810482169172010000000000000000000000000000000000009091041685565b600b8181548110612d6757600080fd5b60009182526020909120015465ffffffffffff8082169250660100000000000082048116916c0100000000000000000000000081048216917201000000000000000000000000000000000000820481169178010000000000000000000000000000000000000000000000008104909116907e01000000000000000000000000000000000000000000000000000000000000900460ff1686565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b82821015612ed35760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152660100000000000082048116938501939093526c010000000000000000000000008104831660608501527201000000000000000000000000000000000000900490911660808301529083529092019101612e42565b505050509050600080600090505b8251811015612f6257828181518110612efc57612efc614842565b60200260200101516060015165ffffffffffff166000148015612f3d5750828181518110612f2c57612f2c614842565b602002602001015160000151600014155b15612f505781612f4c81614bf7565b9250505b80612f5a81614bf7565b915050612ee1565b5060008167ffffffffffffffff811115612f7e57612f7e6143d4565b604051908082528060200260200182016040528015612fa7578160200160208202803683370190505b5090506000805b845181101561140c57848181518110612fc957612fc9614842565b60200260200101516060015165ffffffffffff16600014801561300a5750848181518110612ff957612ff9614842565b602002602001015160000151600014155b1561303b578083838151811061302257613022614842565b60209081029190910101528161303781614bf7565b9250505b8061304581614bf7565b915050612fae565b600854604080517f860f5048000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163860f50489160048083019260209291908290030181865afa1580156130bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e19190614bc1565b600b83815481106130f4576130f4614842565b600091825260209091200154613130907e01000000000000000000000000000000000000000000000000000000000000900460ff16600a614b22565b611180846126c9565b6000818152600c6020908152604080832081516080810183528154815260019091015465ffffffffffff8082169483019490945266010000000000008104909316918101919091526c0100000000000000000000000090910460ff16151560608201819052829182916131b757600080600093509350935050613220565b60208101516131c69042614c59565b9250806040015165ffffffffffff168365ffffffffffff16109150816131ed57805161321c565b806040015165ffffffffffff168365ffffffffffff1682600001516132129190614b31565b61321c9190614b6e565b9350505b9193909250565b61323082612531565b6009838154811061324357613243614842565b9060005260206000209060060201600201600082825461326391906148a0565b9250508190555080600b838154811061327e5761327e614842565b60009182526020808320909101805465ffffffffffff949094166601000000000000027fffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffff90941693909317909255838152600c909152604090206001015460ff6c010000000000000000000000009091041615611262576000828152600c6020526040812090808061330f86613139565b92509250925082600a878154811061332957613329614842565b9060005260206000209060040201600101600082825461334991906148a0565b909155505080156133e4578284600001600082825461336891906148a0565b90915550506001840180548391906006906133969084906601000000000000900465ffffffffffff16614c59565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555061340f565b6001840180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff1690555b505050505050565b6000600b828154811061342c5761342c614842565b600091825260209091200154613468907e01000000000000000000000000000000000000000000000000000000000000900460ff16600a614b22565b61347183613ecf565b600a848154811061348457613484614842565b90600052602060002090600402016001015461118a9190614b31565b73ffffffffffffffffffffffffffffffffffffffff858116600090815260066020526040908190208054825160a08101938490527f66a5236c0000000000000000000000000000000000000000000000000000000090935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa15801561354d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135719190614bc1565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a559883528483208851600290920201908155938701519390970180549287015197870151969095015184167201000000000000000000000000000000000000027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9685166c0100000000000000000000000002969096167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9785166601000000000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090931693909416929092171794909416179190911790556136938684613fe1565b60085490915073ffffffffffffffffffffffffffffffffffffffff166340c10f19306136bf848a614ba9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561372a57600080fd5b505af115801561373e573d6000803e3d6000fd5b50506040517fd866c9d80000000000000000000000000000000000000000000000000000000081523060048201526024810189905260006044820152600160648201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16925063d866c9d891506084016020604051808303816000875af11580156137e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138079190614bc1565b505095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526138a7908590614277565b50505050565b6000600b83815481106138c2576138c2614842565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552660100000000000083048216958501959095526c010000000000000000000000008204811692840192909252720100000000000000000000000000000000000081048216606084015278010000000000000000000000000000000000000000000000008104909116608083018190527e0100000000000000000000000000000000000000000000000000000000000090910460ff1660a083015290925061398f91614c2f565b65ffffffffffff168265ffffffffffff1610613eca576000600984815481106139ba576139ba614842565b600091825260208083206040805160e08101825260069490940290910180548452600181015473ffffffffffffffffffffffffffffffffffffffff8116938501939093527401000000000000000000000000000000000000000090920460ff161515908301526002810154606083015260038101546080830152600481015460a08301526005015460c0820152600a8054919350859187908110613a6057613a60614842565b906000526020600020906004020160020160069054906101000a900465ffffffffffff16613a8e9190614c59565b65ffffffffffff1690506000613aa386613417565b905060008360400151613ab7578351613b8d565b60a0850151613ac790600a614b22565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5791906149b2565b613b62906002614b01565b613b6d90600a614b22565b8651613b799190614b31565b613b839190614b6e565b613b8d9190614b6e565b905082856060015165ffffffffffff1682613ba89190614b31565b613bb29190614b6e565b60098881548110613bc557613bc5614842565b906000526020600020906006020160030181905550600083866040015165ffffffffffff1683613bf59190614b31565b613bff9190614b6e565b9050600081600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c959190614bc1565b613c9f9086614b31565b613ca99190614b6e565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600a8b81548110613ce057613ce0614842565b90600052602060002090600402016001015483604051613d0a929190918252602082015260400190565b60405180910390a2600a8981548110613d2557613d25614842565b9060005260206000209060040201600101548110613d6b5780600a8a81548110613d5157613d51614842565b906000526020600020906004020160010181905550613e6f565b600081600a8b81548110613d8157613d81614842565b906000526020600020906004020160010154613d9d91906148a0565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600c60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600b8a81548110613e8357613e83614842565b600091825260209091200180547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001665ffffffffffff929092169190911790555050505050505b505050565b600854604080517f860f5048000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163860f50489160048083019260209291908290030181865afa158015613f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f639190614bc1565b600b8381548110613f7657613f76614842565b600091825260209091200154613fb2907e01000000000000000000000000000000000000000000000000000000000000900460ff16600a614b22565b60098481548110613fc557613fc5614842565b90600052602060002090600602016002015461118a9190614b31565b60008061271060025485613ff59190614b31565b613fff9190614b6e565b90506000612710600354866140149190614b31565b61401e9190614b6e565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205490915060ff16156141755773ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604081208054839290614084908490614ba9565b9091555050600154604080517f452a93200000000000000000000000000000000000000000000000000000000081529051849260049260009273ffffffffffffffffffffffffffffffffffffffff9092169163452a93209180860191602091819003870181865afa1580156140fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412191906148b7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461416a9190614ba9565b909155506142649050565b61417f8183614ba9565b600154604080517f452a9320000000000000000000000000000000000000000000000000000000008152905160049260009273ffffffffffffffffffffffffffffffffffffffff9091169163452a93209180860191602091819003870181865afa1580156141f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061421591906148b7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461425e9190614ba9565b90915550505b61426e8183614ba9565b95945050505050565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161429f9190614c80565b6000604051808303816000865af19150503d80600081146142dc576040519150601f19603f3d011682016040523d82523d6000602084013e6142e1565b606091505b509092509050816142f6573d6000803e3d6000fd5b805115806143135750808060200190518101906143139190614bda565b6138a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016107dc565b73ffffffffffffffffffffffffffffffffffffffff8116811461439b57600080fd5b50565b6000602082840312156143b057600080fd5b81356106dc81614379565b6000602082840312156143cd57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614426576144266143d4565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614473576144736143d4565b604052919050565b60006040516060810181811067ffffffffffffffff821117156144a0576144a06143d4565b60405290508060608301848111156144b757600080fd5b835b818110156144d15780358352602092830192016144b9565b50505092915050565b801515811461439b57600080fd5b80356144f3816144da565b919050565b600082601f83011261450957600080fd5b614511614403565b80604084018581111561452357600080fd5b845b8181101561140c578035845260209384019301614525565b600082601f83011261454e57600080fd5b614556614403565b80604084018581111561456857600080fd5b845b8181101561140c57803563ffffffff811681146145875760008081fd5b84526020938401930161456a565b600080600080600061014086880312156145ae57600080fd5b85356145b981614379565b94506020603f870188136145cc57600080fd5b6145d88882890161447b565b945087609f8801126145e957600080fd5b6145f1614403565b8060c089018a81111561460357600080fd5b60808a015b8181101561462857803561461b816144da565b8452928401928401614608565b508196506146368b826144f8565b95505050505061464a87610100880161453d565b90509295509295909350565b6000806040838503121561466957600080fd5b823561467481614379565b91506020830135614684816144da565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156146c7578351835292840192918401916001016146ab565b50909695505050505050565b600080604083850312156146e657600080fd5b50508035926020909101359150565b600080600080600060a0868803121561470d57600080fd5b853594506020860135935060408601359250606086013561472d81614379565b9150608086013561473d81614379565b809150509295509295909350565b6000806040838503121561475e57600080fd5b823561476981614379565b946020939093013593505050565b60008060006060848603121561478c57600080fd5b833561479781614379565b925060208481013567ffffffffffffffff808211156147b557600080fd5b818701915087601f8301126147c957600080fd5b8135818111156147db576147db6143d4565b8060051b91506147ec84830161442c565b818152918301840191848101908a84111561480657600080fd5b938501935b838510156148245784358252938501939085019061480b565b809750505050505050614839604085016144e8565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156148b2576148b2614871565b500390565b6000602082840312156148c957600080fd5b81516106dc81614379565b600060208083526000845481600182811c9150808316806148f657607f831692505b858310810361492c577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b8786018381526020018180156149495760018114614978576149a3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616825287820196506149a3565b60008b81526020902060005b8681101561499d57815484820152908501908901614984565b83019750505b50949998505050505050505050565b6000602082840312156149c457600080fd5b815160ff811681146106dc57600080fd5b600181815b80851115614a2e57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614a1457614a14614871565b80851615614a2157918102915b93841c93908002906149da565b509250929050565b600082614a4557506001611117565b81614a5257506000611117565b8160018114614a685760028114614a7257614a8e565b6001915050611117565b60ff841115614a8357614a83614871565b50506001821b611117565b5060208310610133831016604e8410600b8410161715614ab1575081810a611117565b614abb83836149d5565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614aed57614aed614871565b029392505050565b60006106dc8383614a36565b600060ff821660ff84168160ff0481118215151615614aed57614aed614871565b60006106dc60ff841683614a36565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614b6957614b69614871565b500290565b600082614ba4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115614bbc57614bbc614871565b500190565b600060208284031215614bd357600080fd5b5051919050565b600060208284031215614bec57600080fd5b81516106dc816144da565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2857614c28614871565b5060010190565b600065ffffffffffff808316818516808303821115614c5057614c50614871565b01949350505050565b600065ffffffffffff83811690831681811015614c7857614c78614871565b039392505050565b6000825160005b81811015614ca15760208186018101518583015201614c87565b81811115614cb0576000828501525b50919091019291505056fea264697066735822122066835eb1466e8f927192164d6256319b7e91e3d0c8805e67b55458ae7340542d64736f6c634300080d0033",
  "devdoc": {
    "author": "Zeus, Indigo Review by: JeffX",
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in REQ or quote), initial price / REQ (18 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in REQ decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in REQ decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of gREQ due"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in REQ decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = req decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of REQ to be paid in REQ decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gREQ"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_sendgREQ": "send payout as gREQ or sREQ",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in gREQ"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_sendgREQ": "send payout as gREQ or sREQ",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gREQ"
        }
      }
    },
    "title": "Requiem Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11104,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11107,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAuthority)7440"
      },
      {
        "astId": 11204,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11206,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11210,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11214,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11378,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Note)7795_storage)dyn_storage)"
      },
      {
        "astId": 11384,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 11393,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasury)8594"
      },
      {
        "astId": 337,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Market)7478_storage)dyn_storage"
      },
      {
        "astId": 341,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Terms)7489_storage)dyn_storage"
      },
      {
        "astId": 345,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Metadata)7502_storage)dyn_storage"
      },
      {
        "astId": 350,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)7511_storage)"
      },
      {
        "astId": 355,
        "contract": "contracts/BondDepository.sol:BondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)7478_storage)dyn_storage": {
        "base": "t_struct(Market)7478_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)7502_storage)dyn_storage": {
        "base": "t_struct(Metadata)7502_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)7795_storage)dyn_storage": {
        "base": "t_struct(Note)7795_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)7489_storage)dyn_storage": {
        "base": "t_struct(Terms)7489_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuthority)7440": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7287": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)8594": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)7795_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)7795_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)7511_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)7511_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)7511_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 7504,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7506,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 7508,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 7510,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)7478_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 7464,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7467,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)7287"
          },
          {
            "astId": 7469,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7471,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7473,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7475,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7477,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)7502_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 7491,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7493,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7495,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7497,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7499,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7501,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)7795_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 7786,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7788,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 7790,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 7792,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 7794,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)7489_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 7480,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7482,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7484,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 7486,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "conclusion",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 7488,
            "contract": "contracts/BondDepository.sol:BondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}