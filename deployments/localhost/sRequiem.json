{
  "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "LogRebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "LogStakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "LogSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        }
      ],
      "name": "balanceForGons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "gonsForBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rebases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRebased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumberOccured",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_INDEX",
          "type": "uint256"
        }
      ],
      "name": "setIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40320e0a8c056b2b1a0648940e4e95944781ccba4087da2de50540bb55ab63ad",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
    "transactionIndex": 0,
    "gasUsed": "1800457",
    "logsBloom": "0x
    "blockHash": "0x5fec848a206b340e73c0d9f2ccd8412dd0bc08a9d4596d6bd97ff4a11728852a",
    "transactionHash": "0x40320e0a8c056b2b1a0648940e4e95944781ccba4087da2de50540bb55ab63ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24,
        "transactionHash": "0x40320e0a8c056b2b1a0648940e4e95944781ccba4087da2de50540bb55ab63ad",
        "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5fec848a206b340e73c0d9f2ccd8412dd0bc08a9d4596d6bd97ff4a11728852a"
      }
    ],
    "blockNumber": 24,
    "cumulativeGasUsed": "1800457",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c0cfa8d94787ec555e3e51d99860a7c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"LogStakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRebased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberOccured\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_INDEX\",\"type\":\"uint256\"}],\"name\":\"setIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"rebase(uint256,uint256)\":{\"params\":{\"profit_\":\"uint256\"},\"returns\":{\"_0\":\"uint256\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rebase(uint256,uint256)\":{\"notice\":\"increases sREQT supply to increase staking balances relative to profit_\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sRequiemERC20.sol\":\"sRequiem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xcf9183e328685c9d4eb47d374877363f8d84e5b8be528b0b6299eb8b54178d17\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xec988a6ff5da4cdef6378a3f8320e39027f557912ba73c92004a467d8a6cd5fe\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e8d3d7b15eb1fbdbb43a1ae6429be034c38b8bb59288e621d0ee7590564e997\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IManageable {\\n  function policy() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\",\"keccak256\":\"0x7d5cc608ad0e65cb4c690a67ef9f31ea9164caa78d0f51df924985ff0b74e933\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // Silence state mutability warning without generating bytecode.\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\n        // https://github.com/ethereum/solidity/issues/2691\\n        this;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x031b3a12318220e7bc0a3218a468da9a5124284032a4aab13a913b91279c7e92\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override(IERC20, IERC20Metadata) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xf6964379a98a79acb89e6adb85d67052647acc118b3040cf0e8971e895c12cee\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Permit.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n  mapping(address => uint256) private _nonces;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 private immutable _PERMIT_TYPEHASH =\\n    keccak256(\\n      \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n  /**\\n   * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n   *\\n   * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n   */\\n  constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n  /**\\n   * @dev See {IERC20Permit-permit}.\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public virtual override {\\n    // solhint-disable-next-line not-rely-on-time\\n    require(block.timestamp <= deadline, \\\"EXPIRED_PERMIT\\\");\\n\\n    uint256 nonce = _nonces[owner];\\n    bytes32 structHash = keccak256(\\n      abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline)\\n    );\\n\\n    bytes32 hash = _hashTypedDataV4(structHash);\\n\\n    address signer = ecrecover(hash, v, r, s);\\n    require((signer != address(0)) && (signer == owner), \\\"INVALID_SIGNATURE\\\");\\n\\n    _nonces[owner] = nonce + 1;\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev See {IERC20Permit-nonces}.\\n   */\\n  function nonces(address owner) public view override returns (uint256) {\\n    return _nonces[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n}\\n\",\"keccak256\":\"0x3f64906d6431c80f43a703d86e023d562fec38a85b77cce6a226e09486461900\",\"license\":\"MIT\"},\"contracts/libraries/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\ncontract Manageable is IManageable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function policy() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyPolicy() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\",\"keccak256\":\"0x4b28962c8bd35533fa33a14026e4e200b1da069c372a66ee884e39abca0db5e5\",\"license\":\"MIT\"},\"contracts/sRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./libraries/ERC20Permit.sol\\\";\\nimport \\\"./libraries/Manageable.sol\\\";\\n\\ncontract sRequiem is ERC20Permit, Manageable {\\n  modifier onlyStakingContract() {\\n    require(msg.sender == stakingContract, \\\"only staking\\\");\\n    _;\\n  }\\n\\n  address public stakingContract;\\n  address public initializer;\\n\\n  event LogSupply(\\n    uint256 indexed epoch,\\n    uint256 timestamp,\\n    uint256 _totalSupply\\n  );\\n  event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\\n  event LogStakingContractUpdated(address stakingContract);\\n\\n  struct Rebase {\\n    uint256 epoch;\\n    uint256 rebase; // 18 decimals\\n    uint256 totalStakedBefore;\\n    uint256 totalStakedAfter;\\n    uint256 amountRebased;\\n    uint256 index;\\n    uint256 blockNumberOccured;\\n  }\\n  Rebase[] public rebases;\\n\\n  uint256 public INDEX;\\n\\n  uint256 private constant MAX_UINT256 = ~uint256(0);\\n  uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**18;\\n\\n  // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n  // Use the highest value that fits in a uint256 for max granularity.\\n  uint256 private constant TOTAL_GONS =\\n    MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n  // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\\n  uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n\\n  uint256 private _gonsPerFragment;\\n  mapping(address => uint256) private _gonBalances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowedValue;\\n\\n  constructor() ERC20(\\\"Staked Requiem\\\", \\\"sREQ\\\", 18) ERC20Permit(\\\"sREQ\\\") {\\n    initializer = msg.sender;\\n    _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n    _gonsPerFragment = TOTAL_GONS / _totalSupply;\\n  }\\n\\n  function initialize(address stakingContract_) external returns (bool) {\\n    require(msg.sender == initializer);\\n    require(stakingContract_ != address(0));\\n    stakingContract = stakingContract_;\\n    _gonBalances[stakingContract] = TOTAL_GONS;\\n\\n    emit Transfer(address(0x0), stakingContract, _totalSupply);\\n    emit LogStakingContractUpdated(stakingContract_);\\n\\n    initializer = address(0);\\n    return true;\\n  }\\n\\n  function setIndex(uint256 _INDEX) external onlyManager returns (bool) {\\n    require(INDEX == 0);\\n    INDEX = gonsForBalance(_INDEX);\\n    return true;\\n  }\\n\\n  /**\\n        @notice increases sREQT supply to increase staking balances relative to profit_\\n        @param profit_ uint256\\n        @return uint256\\n     */\\n  function rebase(uint256 profit_, uint256 epoch_)\\n    public\\n    onlyStakingContract\\n    returns (uint256)\\n  {\\n    uint256 rebaseAmount;\\n    uint256 circulatingSupply_ = circulatingSupply();\\n\\n    if (profit_ == 0) {\\n      emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n      emit LogRebase(epoch_, 0, index());\\n      return _totalSupply;\\n    } else if (circulatingSupply_ > 0) {\\n      rebaseAmount = (profit_ * _totalSupply) / circulatingSupply_;\\n    } else {\\n      rebaseAmount = profit_;\\n    }\\n\\n    _totalSupply += rebaseAmount;\\n\\n    if (_totalSupply > MAX_SUPPLY) {\\n      _totalSupply = MAX_SUPPLY;\\n    }\\n\\n    _gonsPerFragment = TOTAL_GONS / _totalSupply;\\n\\n    _storeRebase(circulatingSupply_, profit_, epoch_);\\n\\n    return _totalSupply;\\n  }\\n\\n  /**\\n        @notice emits event with data about rebase\\n        @param previousCirculating_ uint\\n        @param profit_ uint\\n        @param epoch_ uint\\n        @return bool\\n     */\\n  function _storeRebase(\\n    uint256 previousCirculating_,\\n    uint256 profit_,\\n    uint256 epoch_\\n  ) internal returns (bool) {\\n    uint256 rebasePercent = (profit_ * 1e18) / previousCirculating_;\\n\\n    rebases.push(\\n      Rebase({\\n        epoch: epoch_,\\n        rebase: rebasePercent, // 18 decimals\\n        totalStakedBefore: previousCirculating_,\\n        totalStakedAfter: circulatingSupply(),\\n        amountRebased: profit_,\\n        index: index(),\\n        blockNumberOccured: block.number\\n      })\\n    );\\n\\n    emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n    emit LogRebase(epoch_, rebasePercent, index());\\n\\n    return true;\\n  }\\n\\n  function balanceOf(address who) public view override returns (uint256) {\\n    return _gonBalances[who] / _gonsPerFragment;\\n  }\\n\\n  function gonsForBalance(uint256 amount) public view returns (uint256) {\\n    return amount * _gonsPerFragment;\\n  }\\n\\n  function balanceForGons(uint256 gons) public view returns (uint256) {\\n    return gons / _gonsPerFragment;\\n  }\\n\\n  // Staking contract holds excess sREQT\\n  function circulatingSupply() public view returns (uint256) {\\n    return _totalSupply - balanceOf(stakingContract);\\n  }\\n\\n  function index() public view returns (uint256) {\\n    return balanceForGons(INDEX);\\n  }\\n\\n  function transfer(address to, uint256 value) public override returns (bool) {\\n    uint256 gonValue = value * _gonsPerFragment;\\n    _gonBalances[msg.sender] -= gonValue;\\n    _gonBalances[to] += gonValue;\\n    emit Transfer(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  function allowance(address owner_, address spender)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _allowedValue[owner_][spender];\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) public override returns (bool) {\\n    _allowedValue[from][msg.sender] -= value;\\n    emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\\n\\n    uint256 gonValue = gonsForBalance(value);\\n    _gonBalances[from] = _gonBalances[from] - gonValue;\\n    _gonBalances[to] = _gonBalances[to] + gonValue;\\n    emit Transfer(from, to, value);\\n\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 value)\\n    public\\n    override\\n    returns (bool)\\n  {\\n    _allowedValue[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  // What gets called in a permit\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  ) internal virtual override {\\n    _allowedValue[owner][spender] = value;\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    override\\n    returns (bool)\\n  {\\n    _allowedValue[msg.sender][spender] += addedValue;\\n    emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    override\\n    returns (bool)\\n  {\\n    uint256 oldValue = _allowedValue[msg.sender][spender];\\n    if (subtractedValue >= oldValue) {\\n      _allowedValue[msg.sender][spender] = 0;\\n    } else {\\n      _allowedValue[msg.sender][spender] = oldValue - subtractedValue;\\n    }\\n    emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xd82fc1e11859e93f3d53a7eb0c6284961a763ce3dd1028a983102f5a7706fcc8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b50604051806040016040528060048152602001637352455160e01b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600e81526020016d5374616b6564205265717569656d60901b815250604051806040016040528060048152602001637352455160e01b81525060128260039080519060200190620000cd929190620001c7565b508151620000e3906004906020850190620001c7565b506005805460ff90921660ff1990921691909117905550508151602092830120608052805191012060a052507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60c052600780546001600160a01b031916339081179091556040516000907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a3600a80546001600160a01b031916331790556a0422ca8b0a00a4250000006002819055620001a48160001962000283565b620001b2906000196200029a565b620001be9190620002c0565b600d5562000313565b828054620001d590620002d7565b90600052602060002090601f016020900481019282620001f9576000855562000244565b82601f106200021457805160ff191683800117855562000244565b8280016001018555821562000244579182015b828111156200024457825182559160200191906001019062000227565b506200025292915062000256565b5090565b5b8082111562000252576000815560010162000257565b634e487b7160e01b600052601260045260246000fd5b6000826200029557620002956200026d565b500690565b600082821015620002bb57634e487b7160e01b600052601160045260246000fd5b500390565b600082620002d257620002d26200026d565b500490565b600181811c90821680620002ec57607f821691505b6020821081036200030d57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051611cad620003626000396000611485015260008181610a8e01526117ca015260008181610ad0015261180c015260008181610aaf01526117eb0152611cad6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806346f68ee91161010457806395d89b41116100a2578063c4d66de811610071578063c4d66de814610412578063d505accf14610425578063dd62ed3e14610438578063ee99205c1461047e57600080fd5b806395d89b41146103c45780639ce110d7146103cc578063a457c2d7146103ec578063a9059cbb146103ff57600080fd5b806373c69eb7116100de57806373c69eb71461032b5780637965d56d146103735780637ecebe00146103865780639358928b146103bc57600080fd5b806346f68ee9146102fd5780635a96ac0a1461031057806370a082311461031857600080fd5b806323b872dd11610171578063313ce5671161014b578063313ce567146102ba5780633644e515146102cf57806339509351146102d757806340a5737f146102ea57600080fd5b806323b872dd146102965780632986c0e5146102a95780632df75cb1146102b157600080fd5b8063089208d8116101ad578063089208d81461024e578063095ea7b31461025857806318160ddd1461027b5780631bd396741461028357600080fd5b80630505c8c9146101d4578063058ecdb41461021857806306fdde0314610239575b600080fd5b60075473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61022b610226366004611932565b61049e565b60405190815260200161020f565b6102416106ca565b60405161020f9190611954565b61025661075c565b005b61026b6102663660046119eb565b61084c565b604051901515815260200161020f565b60025461022b565b61022b610291366004611a15565b6108c5565b61026b6102a4366004611a2e565b6108d5565b61022b610a73565b61022b600c5481565b60055460405160ff909116815260200161020f565b61022b610a85565b61026b6102e53660046119eb565b610b30565b61026b6102f8366004611a15565b610bdb565b61025661030b366004611a6a565b610c81565b610256610e33565b61022b610326366004611a6a565b610f6f565b61033e610339366004611a15565b610fa3565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161020f565b61022b610381366004611a15565b610ff5565b61022b610394366004611a6a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b61022b611005565b610241611037565b600a546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b61026b6103fa3660046119eb565b611046565b61026b61040d3660046119eb565b611162565b61026b610420366004611a6a565b611220565b610256610433366004611a8c565b6113ed565b61022b610446366004611aff565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600f6020908152604080832093909416825291909152205490565b6009546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60095460009073ffffffffffffffffffffffffffffffffffffffff163314610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6f6e6c79207374616b696e67000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080610532611005565b9050846000036105d157837f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da442600254604051610579929190918252602082015260400190565b60405180910390a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006105ad610a73565b6040805192835260208301919091520160405180910390a2600254925050506106c4565b80156105f75780600254866105e69190611b61565b6105f09190611bcd565b91506105fb565b8491505b816002600082825461060d9190611be1565b90915550506002546fffffffffffffffffffffffffffffffff1015610641576fffffffffffffffffffffffffffffffff6002555b6002546106796a0422ca8b0a00a4250000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611bf9565b6106a3907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611c0d565b6106ad9190611bcd565b600d556106bb818686611672565b50600254925050505b92915050565b6060600380546106d990611c24565b80601f016020809104026020016040519081016040528092919081815260200182805461070590611c24565b80156107525780601f1061072757610100808354040283529160200191610752565b820191906000526020600020905b81548152906001019060200180831161073557829003601f168201915b5050505050905090565b60075473ffffffffffffffffffffffffffffffffffffffff1633146107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b60075460405160009173ffffffffffffffffffffffffffffffffffffffff16907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108b49086815260200190565b60405180910390a350600192915050565b6000600d54826106c49190611b61565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f60209081526040808320338452909152812080548391908390610917908490611c0d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000818152600f6020908152604080832033808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3600061098e836108c5565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600e60205260409020549091506109c2908290611c0d565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152600e602052604080822093909355908616815220546109ff908290611be1565b73ffffffffffffffffffffffffffffffffffffffff8086166000818152600e602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a609087815260200190565b60405180910390a3506001949350505050565b6000610a80600c54610ff5565b905090565b6000610a8060007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812080548391908390610b72908490611be1565b9091555050336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591016108b4565b60075460009073ffffffffffffffffffffffffffffffffffffffff163314610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b600c5415610c6c57600080fd5b610c75826108c5565b600c555060015b919050565b60075473ffffffffffffffffffffffffffffffffffffffff163314610d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b73ffffffffffffffffffffffffffffffffffffffff8116610da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161051e565b60075460405173ffffffffffffffffffffffffffffffffffffffff8084169216907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba90600090a3600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60085473ffffffffffffffffffffffffffffffffffffffff163314610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f776e61626c653a206d757374206265206e6577206f776e657220746f20707560448201527f6c6c000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60085460075460405173ffffffffffffffffffffffffffffffffffffffff92831692909116907faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d90600090a3600854600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600d5473ffffffffffffffffffffffffffffffffffffffff82166000908152600e602052604081205490916106c491611bcd565b600b8181548110610fb357600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b6000600d54826106c49190611bcd565b60095460009061102a9073ffffffffffffffffffffffffffffffffffffffff16610f6f565b600254610a809190611c0d565b6060600480546106d990611c24565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548083106110b457336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120556110f0565b6110be8382611c0d565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020555b336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060019392505050565b600080600d54836111739190611b61565b336000908152600e6020526040812080549293508392909190611197908490611c0d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020526040812080548392906111d1908490611be1565b909155505060405183815273ffffffffffffffffffffffffffffffffffffffff85169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611150565b600a5460009073ffffffffffffffffffffffffffffffffffffffff16331461124757600080fd5b73ffffffffffffffffffffffffffffffffffffffff821661126757600080fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790556112dc6a0422ca8b0a00a4250000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611bf9565b611306907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611c0d565b6009805473ffffffffffffffffffffffffffffffffffffffff9081166000908152600e602052604080822094909455915460025493519116927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9161136d91815260200190565b60405180910390a360405173ffffffffffffffffffffffffffffffffffffffff831681527f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19060200160405180910390a15050600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600190565b83421115611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f455850495245445f5045524d4954000000000000000000000000000000000000604482015260640161051e565b73ffffffffffffffffffffffffffffffffffffffff87811660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e090940190528251920191909120906114f0826117c1565b6040805160008082526020820180845284905260ff8a169282019290925260608101889052608081018790529192509060019060a0016020604051602081039080840390855afa158015611548573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906115c357508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161051e565b611634846001611be1565b73ffffffffffffffffffffffffffffffffffffffff8c166000908152600660205260409020556116658b8b8b6118c4565b5050505050505050505050565b6000808461168885670de0b6b3a7640000611b61565b6116929190611bcd565b9050600b6040518060e001604052808581526020018381526020018781526020016116bb611005565b81526020018681526020016116ce610a73565b81524360209182015282546001808201855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c090930151600690940193909355905482514281529182015284917f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4910160405180910390a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb28261179e610a73565b6040805192835260208301919091520160405180910390a2506001949350505050565b600061186c60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050919050565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000806040838503121561194557600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561198157858101830151858201604001528201611965565b81811115611993576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c7c57600080fd5b600080604083850312156119fe57600080fd5b611a07836119c7565b946020939093013593505050565b600060208284031215611a2757600080fd5b5035919050565b600080600060608486031215611a4357600080fd5b611a4c846119c7565b9250611a5a602085016119c7565b9150604084013590509250925092565b600060208284031215611a7c57600080fd5b611a85826119c7565b9392505050565b600080600080600080600060e0888a031215611aa757600080fd5b611ab0886119c7565b9650611abe602089016119c7565b95506040880135945060608801359350608088013560ff81168114611ae257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611b1257600080fd5b611b1b836119c7565b9150611b29602084016119c7565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b9957611b99611b32565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611bdc57611bdc611b9e565b500490565b60008219821115611bf457611bf4611b32565b500190565b600082611c0857611c08611b9e565b500690565b600082821015611c1f57611c1f611b32565b500390565b600181811c90821680611c3857607f821691505b602082108103611c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220e62f62cf743ee664ed511ce6a9dec81ef9a061fb29d0ec532cb5b6bfa37e983964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806346f68ee91161010457806395d89b41116100a2578063c4d66de811610071578063c4d66de814610412578063d505accf14610425578063dd62ed3e14610438578063ee99205c1461047e57600080fd5b806395d89b41146103c45780639ce110d7146103cc578063a457c2d7146103ec578063a9059cbb146103ff57600080fd5b806373c69eb7116100de57806373c69eb71461032b5780637965d56d146103735780637ecebe00146103865780639358928b146103bc57600080fd5b806346f68ee9146102fd5780635a96ac0a1461031057806370a082311461031857600080fd5b806323b872dd11610171578063313ce5671161014b578063313ce567146102ba5780633644e515146102cf57806339509351146102d757806340a5737f146102ea57600080fd5b806323b872dd146102965780632986c0e5146102a95780632df75cb1146102b157600080fd5b8063089208d8116101ad578063089208d81461024e578063095ea7b31461025857806318160ddd1461027b5780631bd396741461028357600080fd5b80630505c8c9146101d4578063058ecdb41461021857806306fdde0314610239575b600080fd5b60075473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61022b610226366004611932565b61049e565b60405190815260200161020f565b6102416106ca565b60405161020f9190611954565b61025661075c565b005b61026b6102663660046119eb565b61084c565b604051901515815260200161020f565b60025461022b565b61022b610291366004611a15565b6108c5565b61026b6102a4366004611a2e565b6108d5565b61022b610a73565b61022b600c5481565b60055460405160ff909116815260200161020f565b61022b610a85565b61026b6102e53660046119eb565b610b30565b61026b6102f8366004611a15565b610bdb565b61025661030b366004611a6a565b610c81565b610256610e33565b61022b610326366004611a6a565b610f6f565b61033e610339366004611a15565b610fa3565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161020f565b61022b610381366004611a15565b610ff5565b61022b610394366004611a6a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b61022b611005565b610241611037565b600a546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b61026b6103fa3660046119eb565b611046565b61026b61040d3660046119eb565b611162565b61026b610420366004611a6a565b611220565b610256610433366004611a8c565b6113ed565b61022b610446366004611aff565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600f6020908152604080832093909416825291909152205490565b6009546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60095460009073ffffffffffffffffffffffffffffffffffffffff163314610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6f6e6c79207374616b696e67000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080610532611005565b9050846000036105d157837f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da442600254604051610579929190918252602082015260400190565b60405180910390a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006105ad610a73565b6040805192835260208301919091520160405180910390a2600254925050506106c4565b80156105f75780600254866105e69190611b61565b6105f09190611bcd565b91506105fb565b8491505b816002600082825461060d9190611be1565b90915550506002546fffffffffffffffffffffffffffffffff1015610641576fffffffffffffffffffffffffffffffff6002555b6002546106796a0422ca8b0a00a4250000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611bf9565b6106a3907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611c0d565b6106ad9190611bcd565b600d556106bb818686611672565b50600254925050505b92915050565b6060600380546106d990611c24565b80601f016020809104026020016040519081016040528092919081815260200182805461070590611c24565b80156107525780601f1061072757610100808354040283529160200191610752565b820191906000526020600020905b81548152906001019060200180831161073557829003601f168201915b5050505050905090565b60075473ffffffffffffffffffffffffffffffffffffffff1633146107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b60075460405160009173ffffffffffffffffffffffffffffffffffffffff16907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108b49086815260200190565b60405180910390a350600192915050565b6000600d54826106c49190611b61565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f60209081526040808320338452909152812080548391908390610917908490611c0d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000818152600f6020908152604080832033808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3600061098e836108c5565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600e60205260409020549091506109c2908290611c0d565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152600e602052604080822093909355908616815220546109ff908290611be1565b73ffffffffffffffffffffffffffffffffffffffff8086166000818152600e602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a609087815260200190565b60405180910390a3506001949350505050565b6000610a80600c54610ff5565b905090565b6000610a8060007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812080548391908390610b72908490611be1565b9091555050336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591016108b4565b60075460009073ffffffffffffffffffffffffffffffffffffffff163314610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b600c5415610c6c57600080fd5b610c75826108c5565b600c555060015b919050565b60075473ffffffffffffffffffffffffffffffffffffffff163314610d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b73ffffffffffffffffffffffffffffffffffffffff8116610da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161051e565b60075460405173ffffffffffffffffffffffffffffffffffffffff8084169216907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba90600090a3600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60085473ffffffffffffffffffffffffffffffffffffffff163314610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f776e61626c653a206d757374206265206e6577206f776e657220746f20707560448201527f6c6c000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60085460075460405173ffffffffffffffffffffffffffffffffffffffff92831692909116907faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d90600090a3600854600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600d5473ffffffffffffffffffffffffffffffffffffffff82166000908152600e602052604081205490916106c491611bcd565b600b8181548110610fb357600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b6000600d54826106c49190611bcd565b60095460009061102a9073ffffffffffffffffffffffffffffffffffffffff16610f6f565b600254610a809190611c0d565b6060600480546106d990611c24565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548083106110b457336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120556110f0565b6110be8382611c0d565b336000908152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020555b336000818152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060019392505050565b600080600d54836111739190611b61565b336000908152600e6020526040812080549293508392909190611197908490611c0d565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020526040812080548392906111d1908490611be1565b909155505060405183815273ffffffffffffffffffffffffffffffffffffffff85169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611150565b600a5460009073ffffffffffffffffffffffffffffffffffffffff16331461124757600080fd5b73ffffffffffffffffffffffffffffffffffffffff821661126757600080fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790556112dc6a0422ca8b0a00a4250000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611bf9565b611306907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611c0d565b6009805473ffffffffffffffffffffffffffffffffffffffff9081166000908152600e602052604080822094909455915460025493519116927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9161136d91815260200190565b60405180910390a360405173ffffffffffffffffffffffffffffffffffffffff831681527f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19060200160405180910390a15050600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600190565b83421115611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f455850495245445f5045524d4954000000000000000000000000000000000000604482015260640161051e565b73ffffffffffffffffffffffffffffffffffffffff87811660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e090940190528251920191909120906114f0826117c1565b6040805160008082526020820180845284905260ff8a169282019290925260608101889052608081018790529192509060019060a0016020604051602081039080840390855afa158015611548573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906115c357508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161051e565b611634846001611be1565b73ffffffffffffffffffffffffffffffffffffffff8c166000908152600660205260409020556116658b8b8b6118c4565b5050505050505050505050565b6000808461168885670de0b6b3a7640000611b61565b6116929190611bcd565b9050600b6040518060e001604052808581526020018381526020018781526020016116bb611005565b81526020018681526020016116ce610a73565b81524360209182015282546001808201855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c090930151600690940193909355905482514281529182015284917f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4910160405180910390a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb28261179e610a73565b6040805192835260208301919091520160405180910390a2506001949350505050565b600061186c60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050919050565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000806040838503121561194557600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561198157858101830151858201604001528201611965565b81811115611993576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c7c57600080fd5b600080604083850312156119fe57600080fd5b611a07836119c7565b946020939093013593505050565b600060208284031215611a2757600080fd5b5035919050565b600080600060608486031215611a4357600080fd5b611a4c846119c7565b9250611a5a602085016119c7565b9150604084013590509250925092565b600060208284031215611a7c57600080fd5b611a85826119c7565b9392505050565b600080600080600080600060e0888a031215611aa757600080fd5b611ab0886119c7565b9650611abe602089016119c7565b95506040880135945060608801359350608088013560ff81168114611ae257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611b1257600080fd5b611b1b836119c7565b9150611b29602084016119c7565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b9957611b99611b32565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611bdc57611bdc611b9e565b500490565b60008219821115611bf457611bf4611b32565b500190565b600082611c0857611c08611b9e565b500690565b600082821015611c1f57611c1f611b32565b500390565b600181811c90821680611c3857607f821691505b602082108103611c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220e62f62cf743ee664ed511ce6a9dec81ef9a061fb29d0ec532cb5b6bfa37e983964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "rebase(uint256,uint256)": {
        "params": {
          "profit_": "uint256"
        },
        "returns": {
          "_0": "uint256"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rebase(uint256,uint256)": {
        "notice": "increases sREQT supply to increase staking balances relative to profit_"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9307,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9313,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9315,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9317,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 9319,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9321,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 9925,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10113,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10115,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_newOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15708,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "stakingContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15710,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "initializer",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 15749,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "rebases",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Rebase)15745_storage)dyn_storage"
      },
      {
        "astId": 15751,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "INDEX",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15782,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_gonsPerFragment",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15786,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_gonBalances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15792,
        "contract": "contracts/sRequiemERC20.sol:sRequiem",
        "label": "_allowedValue",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Rebase)15745_storage)dyn_storage": {
        "base": "t_struct(Rebase)15745_storage",
        "encoding": "dynamic_array",
        "label": "struct sRequiem.Rebase[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Rebase)15745_storage": {
        "encoding": "inplace",
        "label": "struct sRequiem.Rebase",
        "members": [
          {
            "astId": 15732,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "epoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15734,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "rebase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15736,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "totalStakedBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15738,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "totalStakedAfter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15740,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "amountRebased",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15742,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "index",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15744,
            "contract": "contracts/sRequiemERC20.sol:sRequiem",
            "label": "blockNumberOccured",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}