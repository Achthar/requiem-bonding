{
  "address": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_req",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sREQ",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gREQ",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "DistributorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "warmup",
          "type": "uint256"
        }
      ],
      "name": "WarmupSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REQ",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_rebasing",
          "type": "bool"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distribute",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gREQ",
      "outputs": [
        {
          "internalType": "contract IgREQ",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sREQ",
      "outputs": [
        {
          "internalType": "contract IsREQ",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondsToNextEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_warmupPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWarmupLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_rebasing",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_claim",
          "type": "bool"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyInWarmup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_rebasing",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sBalance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "warmupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "lock",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warmupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gBalance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x169bf6f4d0cc3632ca57470db52f696029a0b22ddff843b3c052b0ca3d4883c2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
    "transactionIndex": 0,
    "gasUsed": "1675420",
    "logsBloom": "0x
    "blockHash": "0x68f12d8861201bb873647311e07eced97f77892c99d5822e287915ec5a91f858",
    "transactionHash": "0x169bf6f4d0cc3632ca57470db52f696029a0b22ddff843b3c052b0ca3d4883c2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x169bf6f4d0cc3632ca57470db52f696029a0b22ddff843b3c052b0ca3d4883c2",
        "address": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000009635f643e140090a9a8dcd712ed6285858cebef"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x68f12d8861201bb873647311e07eced97f77892c99d5822e287915ec5a91f858"
      }
    ],
    "blockNumber": 29,
    "cumulativeGasUsed": "1675420",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
    "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
    "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    10000,
    1,
    0,
    "0x09635F643e140090A9A8Dcd712eD6285858ceBef"
  ],
  "solcInputHash": "cd99654098dc38470b6f581c9b9a4145",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_req\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sREQ\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gREQ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"DistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"warmup\",\"type\":\"uint256\"}],\"name\":\"WarmupSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQ\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_rebasing\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gREQ\",\"outputs\":[{\"internalType\":\"contract IgREQ\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sREQ\",\"outputs\":[{\"internalType\":\"contract IsREQ\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmupLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rebasing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInWarmup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rebasing\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"warmupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,bool)\":{\"params\":{\"_rebasing\":\"bool\",\"_to\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"forfeit()\":{\"returns\":{\"_0\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"rebase()\":{\"returns\":{\"_0\":\"uint256\"}},\"setDistributor(address)\":{\"params\":{\"_distributor\":\"address\"}},\"setWarmupLength(uint256)\":{\"params\":{\"_warmupPeriod\":\"uint\"}},\"stake(address,uint256,bool,bool)\":{\"params\":{\"_amount\":\"uint\",\"_claim\":\"bool\",\"_rebasing\":\"bool\",\"_to\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"unstake(address,uint256,bool,bool)\":{\"params\":{\"_amount\":\"uint\",\"_rebasing\":\"bool\",\"_to\":\"address\",\"_trigger\":\"bool\"},\"returns\":{\"amount_\":\"uint\"}},\"unwrap(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"},\"returns\":{\"sBalance_\":\"uint\"}},\"wrap(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"},\"returns\":{\"gBalance_\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,bool)\":{\"notice\":\"retrieve stake from warmup\"},\"forfeit()\":{\"notice\":\"forfeit stake and retrieve REQ\"},\"index()\":{\"notice\":\"returns the sREQ index, which tracks rebase growth\"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"secondsToNextEpoch()\":{\"notice\":\"seconds until the next epoch begins\"},\"setDistributor(address)\":{\"notice\":\"sets the contract address for LP staking\"},\"setWarmupLength(uint256)\":{\"notice\":\"set warmup period for new stakers\"},\"stake(address,uint256,bool,bool)\":{\"notice\":\"stake REQ to enter warmup\"},\"supplyInWarmup()\":{\"notice\":\"total supply in warmup\"},\"toggleLock()\":{\"notice\":\"prevent new deposits or claims from ext. address (protection from malicious activity)\"},\"unstake(address,uint256,bool,bool)\":{\"notice\":\"redeem sREQ for REQs\"},\"unwrap(address,uint256)\":{\"notice\":\"convert _amount gREQ into sBalance_ sREQ\"},\"wrap(address,uint256)\":{\"notice\":\"convert _amount sREQ into gBalance_ gREQ\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IsREQ.sol\\\";\\nimport \\\"./interfaces/IgREQ.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\n\\nimport \\\"./libraries/types/AccessControlled.sol\\\";\\n\\ncontract Staking is AccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IsREQ;\\n    using SafeERC20 for IgREQ;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event DistributorSet(address distributor);\\n    event WarmupSet(uint256 warmup);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Epoch {\\n        uint256 length; // in seconds\\n        uint256 number; // since inception\\n        uint256 end; // timestamp\\n        uint256 distribute; // amount\\n    }\\n\\n    struct Claim {\\n        uint256 deposit; // if forfeiting\\n        uint256 gons; // staked balance\\n        uint256 expiry; // end of warmup period\\n        bool lock; // prevents malicious delays for claim\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public immutable REQ;\\n    IsREQ public immutable sREQ;\\n    IgREQ public immutable gREQ;\\n\\n    Epoch public epoch;\\n\\n    IDistributor public distributor;\\n\\n    mapping(address => Claim) public warmupInfo;\\n    uint256 public warmupPeriod;\\n    uint256 private gonsInWarmup;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _req,\\n        address _sREQ,\\n        address _gREQ,\\n        uint256 _epochLength,\\n        uint256 _firstEpochNumber,\\n        uint256 _firstEpochTime,\\n        address _authority\\n    ) AccessControlled(IAuthority(_authority)) {\\n        require(_req != address(0), \\\"Zero address: REQ\\\");\\n        REQ = IERC20(_req);\\n        require(_sREQ != address(0), \\\"Zero address: sREQ\\\");\\n        sREQ = IsREQ(_sREQ);\\n        require(_gREQ != address(0), \\\"Zero address: gREQ\\\");\\n        gREQ = IgREQ(_gREQ);\\n\\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice stake REQ to enter warmup\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _claim bool\\n     * @param _rebasing bool\\n     * @return uint\\n     */\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256) {\\n        REQ.safeTransferFrom(msg.sender, address(this), _amount);\\n        _amount += rebase(); // add bounty if rebase occurred\\n        if (_claim && warmupPeriod == 0) {\\n            return _send(_to, _amount, _rebasing);\\n        } else {\\n            Claim memory info = warmupInfo[_to];\\n            if (!info.lock) {\\n                require(_to == msg.sender, \\\"External deposits for account are locked\\\");\\n            }\\n\\n            warmupInfo[_to] = Claim({\\n                deposit: info.deposit + _amount,\\n                gons: info.gons + sREQ.gonsForBalance(_amount),\\n                expiry: epoch.number + warmupPeriod,\\n                lock: info.lock\\n            });\\n\\n            gonsInWarmup = gonsInWarmup + sREQ.gonsForBalance(_amount);\\n\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice retrieve stake from warmup\\n     * @param _to address\\n     * @param _rebasing bool\\n     * @return uint\\n     */\\n    function claim(address _to, bool _rebasing) public returns (uint256) {\\n        Claim memory info = warmupInfo[_to];\\n\\n        if (!info.lock) {\\n            require(_to == msg.sender, \\\"External claims for account are locked\\\");\\n        }\\n\\n        if (epoch.number >= info.expiry && info.expiry != 0) {\\n            delete warmupInfo[_to];\\n\\n            gonsInWarmup -= info.gons;\\n\\n            return _send(_to, sREQ.balanceForGons(info.gons), _rebasing);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice forfeit stake and retrieve REQ\\n     * @return uint\\n     */\\n    function forfeit() external returns (uint256) {\\n        Claim memory info = warmupInfo[msg.sender];\\n        delete warmupInfo[msg.sender];\\n\\n        gonsInWarmup -= info.gons;\\n\\n        REQ.safeTransfer(msg.sender, info.deposit);\\n\\n        return info.deposit;\\n    }\\n\\n    /**\\n     * @notice prevent new deposits or claims from ext. address (protection from malicious activity)\\n     */\\n    function toggleLock() external {\\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\\n    }\\n\\n    /**\\n     * @notice redeem sREQ for REQs\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _trigger bool\\n     * @param _rebasing bool\\n     * @return amount_ uint\\n     */\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256 amount_) {\\n        amount_ = _amount;\\n        uint256 bounty;\\n        if (_trigger) {\\n            bounty = rebase();\\n        }\\n        if (_rebasing) {\\n            sREQ.safeTransferFrom(msg.sender, address(this), _amount);\\n            amount_ += bounty;\\n        } else {\\n            gREQ.burn(msg.sender, _amount); // amount was given in gREQ terms\\n            amount_ = gREQ.balanceFrom(amount_) + bounty; // convert amount to REQ terms & add bounty\\n        }\\n\\n        require(amount_ <= REQ.balanceOf(address(this)), \\\"Insufficient REQ balance in contract\\\");\\n        REQ.safeTransfer(_to, amount_);\\n    }\\n\\n    /**\\n     * @notice convert _amount sREQ into gBalance_ gREQ\\n     * @param _to address\\n     * @param _amount uint\\n     * @return gBalance_ uint\\n     */\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_) {\\n        sREQ.safeTransferFrom(msg.sender, address(this), _amount);\\n        gBalance_ = gREQ.balanceTo(_amount);\\n        gREQ.mint(_to, gBalance_);\\n    }\\n\\n    /**\\n     * @notice convert _amount gREQ into sBalance_ sREQ\\n     * @param _to address\\n     * @param _amount uint\\n     * @return sBalance_ uint\\n     */\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_) {\\n        gREQ.burn(msg.sender, _amount);\\n        sBalance_ = gREQ.balanceFrom(_amount);\\n        sREQ.safeTransfer(_to, sBalance_);\\n    }\\n\\n    /**\\n     * @notice trigger rebase if epoch over\\n     * @return uint256\\n     */\\n    function rebase() public returns (uint256) {\\n        uint256 bounty;\\n        if (epoch.end <= block.timestamp) {\\n            sREQ.rebase(epoch.distribute, epoch.number);\\n\\n            epoch.end += epoch.length;\\n            epoch.number++;\\n\\n            if (address(distributor) != address(0)) {\\n                distributor.distribute();\\n                bounty = distributor.retrieveBounty(); // Will mint req for this contract if there exists a bounty\\n            }\\n            uint256 balance = REQ.balanceOf(address(this));\\n            uint256 staked = sREQ.circulatingSupply();\\n            if (balance <= staked + bounty) {\\n                epoch.distribute = 0;\\n            } else {\\n                epoch.distribute = balance - staked - bounty;\\n            }\\n        }\\n        return bounty;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice send staker their amount as sREQ or gREQ\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _rebasing bool\\n     */\\n    function _send(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing\\n    ) internal returns (uint256) {\\n        if (_rebasing) {\\n            sREQ.safeTransfer(_to, _amount); // send as sREQ (equal unit as REQ)\\n            return _amount;\\n        } else {\\n            gREQ.mint(_to, gREQ.balanceTo(_amount)); // send as gREQ (convert units from REQ)\\n            return gREQ.balanceTo(_amount);\\n        }\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice returns the sREQ index, which tracks rebase growth\\n     * @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return sREQ.index();\\n    }\\n\\n    /**\\n     * @notice total supply in warmup\\n     */\\n    function supplyInWarmup() public view returns (uint256) {\\n        return sREQ.balanceForGons(gonsInWarmup);\\n    }\\n\\n    /**\\n     * @notice seconds until the next epoch begins\\n     */\\n    function secondsToNextEpoch() external view returns (uint256) {\\n        return epoch.end - block.timestamp;\\n    }\\n\\n    /* ========== MANAGERIAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice sets the contract address for LP staking\\n     * @param _distributor address\\n     */\\n    function setDistributor(address _distributor) external onlyGovernor {\\n        distributor = IDistributor(_distributor);\\n        emit DistributorSet(_distributor);\\n    }\\n\\n    /**\\n     * @notice set warmup period for new stakers\\n     * @param _warmupPeriod uint\\n     */\\n    function setWarmupLength(uint256 _warmupPeriod) external onlyGovernor {\\n        warmupPeriod = _warmupPeriod;\\n        emit WarmupSet(_warmupPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x5f31447ef6a56a9b0f20c8629a96507f275aa89e7a76616c6bb86e9ae528b692\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x8dbe6c86e1a82d74cece2191fcab3537484a56449e27af3918e0d416871cfeb8\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd2f9dee40b880fa050fe8c533b4ee0abc8fc820366a322700882677fdbb48f7a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf6e0112884cd30befeab8bb109004f27a5f1db3b57f48d543164a368024c4d05\",\"license\":\"MIT\"},\"contracts/interfaces/IgREQ.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IgREQ is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sREQ) external;\\n}\\n\",\"keccak256\":\"0xc336a7ae1852a0f3ea695cfe6781677b3ecf673147cb73a0471b178be692c875\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IsREQ.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.5;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IsREQ is IERC20 {\\n    function rebase(uint256 reqProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function toG(uint256 amount) external view returns (uint256);\\n\\n    function fromG(uint256 amount) external view returns (uint256);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0928eeba2a4fa586082ade17ed93ec12840d211226c63c4472350881f181107f\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      \\\"SAFE_ERC20_CALL_FAILED\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xcf1f0a6ad9896170de07c190358be86e5f3cc4faf5c8be7ed30f2b7ad8316911\",\"license\":\"MIT\"},\"contracts/libraries/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.5;\\n\\nimport \\\"../../interfaces/IAuthority.sol\\\";\\n\\nabstract contract AccessControlled {\\n  /* ========== EVENTS ========== */\\n\\n  event AuthorityUpdated(IAuthority indexed authority);\\n\\n  string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IAuthority public authority;\\n\\n  /* ========== Constructor ========== */\\n\\n  constructor(IAuthority _authority) {\\n    authority = _authority;\\n    emit AuthorityUpdated(_authority);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier onlyGovernor() {\\n    require(msg.sender == authority.governor(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyPolicy() {\\n    require(msg.sender == authority.policy(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyVault() {\\n    require(msg.sender == authority.vault(), UNAUTHORIZED);\\n    _;\\n  }\\n\\n  /* ========== GOV ONLY ========== */\\n\\n  function setAuthority(IAuthority _newAuthority) external onlyGovernor {\\n    authority = _newAuthority;\\n    emit AuthorityUpdated(_newAuthority);\\n  }\\n}\\n\",\"keccak256\":\"0xaf8b9d248a1aab3e858a0efc1f70126b26b308793cb519347c8cd0bbb1ba7e99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b610100908152620000319160009190620001f1565b503480156200003f57600080fd5b5060405162001fbb38038062001fbb8339810160408190526200006291620002b4565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038716620000fd5760405162461bcd60e51b81526020600482015260116024820152705a65726f20616464726573733a2052455160781b60448201526064015b60405180910390fd5b6001600160a01b038088166080528616620001505760405162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a207352455160701b6044820152606401620000f4565b6001600160a01b0380871660a0528516620001a35760405162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a206752455160701b6044820152606401620000f4565b506001600160a01b0390931660c052604080516080810182528381526020810183905290810184905260006060909101819052600292909255600355600491909155600555506200036b9050565b828054620001ff906200032e565b90600052602060002090601f0160209004810192826200022357600085556200026e565b82601f106200023e57805160ff19168380011785556200026e565b828001600101855582156200026e579182015b828111156200026e57825182559160200191906001019062000251565b506200027c92915062000280565b5090565b5b808211156200027c576000815560010162000281565b80516001600160a01b0381168114620002af57600080fd5b919050565b600080600080600080600060e0888a031215620002d057600080fd5b620002db8862000297565b9650620002eb6020890162000297565b9550620002fb6040890162000297565b9450606088015193506080880151925060a088015191506200032060c0890162000297565b905092959891949750929550565b600181811c908216806200034357607f821691505b602082108114156200036557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611b78620004436000396000818161033e015281816104a80152818161052001528181610b1501528181610b900152818161109b01528181611137015281816116150152611704015260008181610204015281816103ac0152818161042d015281816105a4015281816109fd01528181610ac001528181610d5c01528181610f910152818161105d015281816112eb0152818161140e01526115d10152600081816102fb01528181610c2601528181610d0101528181610f18015281816111aa01526115260152611b786000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063990966d5116100b8578063d26700251161007c578063d2670025146102f6578063d866c9d81461031d578063deac361a14610330578063ee487d9e14610339578063f3d86e4a14610360578063ff9413d81461036857600080fd5b8063990966d5146102a2578063af14052c146102b5578063bf376c7a146102bd578063bf7e214f146102d0578063bfe10928146102e357600080fd5b80637a9e5e4b1161010a5780637a9e5e4b146101ec5780638cb649e1146101ff578063900cf0cf1461023e5780639238d5921461027457806392fd2daf146102875780639483c1d71461029a57600080fd5b806320138641146101475780632986c0e51461016257806339f476931461016a5780636746f4c21461017d57806375619ab5146101d7575b600080fd5b61014f61038f565b6040519081526020015b60405180910390f35b61014f610429565b61014f6101783660046118b0565b610489565b6101b561018b3660046118dc565b60076020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610159565b6101ea6101e53660046118dc565b6105d1565b005b6101ea6101fa3660046118dc565b6106db565b6102267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610159565b6002546003546004546005546102549392919084565b604080519485526020850193909352918301526060820152608001610159565b6101ea6102823660046118f9565b6107d1565b61014f610295366004611920565b6108b2565b61014f610a88565b61014f6102b0366004611959565b610a99565b61014f610d31565b61014f6102cb3660046118b0565b61104e565b600154610226906001600160a01b031681565b600654610226906001600160a01b031681565b6102267f000000000000000000000000000000000000000000000000000000000000000081565b61014f61032b366004611959565b61119b565b61014f60085481565b6102267f000000000000000000000000000000000000000000000000000000000000000081565b61014f611498565b6101ea336000908152600760205260409020600301805460ff19811660ff90911615179055565b600954604051637965d56d60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637965d56d916103e39160040190815260200190565b602060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042491906119ac565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610400573d6000803e3d6000fd5b604051632770a7eb60e21b8152336004820152602481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505060405163150490ed60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a82487689150602401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059591906119ac565b90506105cb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611554565b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064891906119c5565b6001600160a01b0316336001600160a01b0316146000906106855760405162461bcd60e51b815260040161067c91906119e2565b60405180910390fd5b50600680546001600160a01b0319166001600160a01b0383169081179091556040519081527f86719c518c7d99ac94b3d405d462ea876ba5cd0a978461dc9a7c9862a9485886906020015b60405180910390a150565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075291906119c5565b6001600160a01b0316336001600160a01b0316146000906107865760405162461bcd60e51b815260040161067c91906119e2565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084891906119c5565b6001600160a01b0316336001600160a01b03161460009061087c5760405162461bcd60e51b815260040161067c91906119e2565b5060088190556040518181527fac17d51c35ac71d3eddc155985908430e88946d51e2f6093e93c1c0aba08f6c4906020016106d0565b6001600160a01b03821660009081526007602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460ff1615156060820181905261096c576001600160a01b038416331461096c5760405162461bcd60e51b815260206004820152602660248201527f45787465726e616c20636c61696d7320666f72206163636f756e7420617265206044820152651b1bd8dad95960d21b606482015260840161067c565b6040810151600354108015906109855750604081015115155b15610a7e576001600160a01b038416600090815260076020908152604082208281556001810183905560028101839055600301805460ff1916905582015160098054919290916109d6908490611aa0565b90915550506020810151604051637965d56d60e01b81526004810191909152610a769085907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637965d56d90602401602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7091906119ac565b856115bc565b9150506105cb565b5060009392505050565b600454600090610424904290611aa0565b8260008315610aad57610aaa610d31565b90505b8215610af957610ae86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088611783565b610af28183611ab7565b9150610c11565b604051632770a7eb60e21b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b505060405163150490ed60e31b8152600481018590528392507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063a824876890602401602060405180830381865afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0491906119ac565b610c0e9190611ab7565b91505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9991906119ac565b821115610cf45760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e74205245512062616c616e636520696e20636f6e746044820152631c9858dd60e21b606482015260840161067c565b610d286001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784611554565b50949350505050565b6000804260028001541161104957600554600354604051630163b36d60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263058ecdb492610d9892600401918252602082015260400190565b6020604051808303816000875af1158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb91906119ac565b5060025460048054600090610df1908490611ab7565b909155505060038054906000610e0683611acf565b90915550506006546001600160a01b031615610f0057600660009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b031663e7187e8a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd91906119ac565b90505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906119ac565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101191906119ac565b905061101d8382611ab7565b821161102d576000600555611046565b826110388284611aa0565b6110429190611aa0565b6005555b50505b919050565b60006110856001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611783565b6040516319a948db60e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906366a5236c90602401602060405180830381865afa1580156110ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110e91906119ac565b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b5050505092915050565b60006111d26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333087611783565b6111da610d31565b6111e49085611ab7565b93508180156111f35750600854155b1561120a576112038585856115bc565b9050611490565b6001600160a01b03851660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082018190526112c9576001600160a01b03861633146112c95760405162461bcd60e51b815260206004820152602860248201527f45787465726e616c206465706f7369747320666f72206163636f756e7420617260448201526719481b1bd8dad95960c21b606482015260840161067c565b60405180608001604052808683600001516112e49190611ab7565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674886040518263ffffffff1660e01b815260040161133791815260200190565b602060405180830381865afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137891906119ac565b83602001516113879190611ab7565b815260200160085460026001015461139f9190611ab7565b815260608381015115156020928301526001600160a01b038981166000908152600784526040908190208551815593850151600185015584810151600285015593909101516003909201805460ff19169215159290921790915590516306f4e59d60e21b8152600481018790527f000000000000000000000000000000000000000000000000000000000000000090911690631bd3967490602401602060405180830381865afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b91906119ac565b6009546114889190611ab7565b600955508390505b949350505050565b3360008181526007602081815260408084208151608081018352815481526001820180548286019081526002840180549584019590955260038401805460ff8116151560608601529989529690955291869055908590559084905560ff1990941690915551600980549293928490611511908490611aa0565b9091555050805161154e906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390611554565b51919050565b6040516001600160a01b0383166024820152604481018290526115b790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117c1565b505050565b600081156115ff576115f86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611554565b508161177c565b6040516319a948db60e21b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990869083906366a5236c90602401602060405180830381865afa15801561166e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169291906119ac565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156116d857600080fd5b505af11580156116ec573d6000803e3d6000fd5b50506040516319a948db60e21b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506366a5236c9150602401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177991906119ac565b90505b9392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526117bb9085906323b872dd60e01b90608401611580565b50505050565b600080836001600160a01b0316836040516117dc9190611aea565b6000604051808303816000865af19150503d8060008114611819576040519150601f19603f3d011682016040523d82523d6000602084013e61181e565b606091505b50915091506000821415611836573d6000803e3d6000fd5b805115806118535750808060200190518101906118539190611b25565b6117bb5760405162461bcd60e51b815260206004820152601660248201527514d0519157d15490cc8c17d0d0531317d1905253115160521b604482015260640161067c565b6001600160a01b03811681146118ad57600080fd5b50565b600080604083850312156118c357600080fd5b82356118ce81611898565b946020939093013593505050565b6000602082840312156118ee57600080fd5b813561177c81611898565b60006020828403121561190b57600080fd5b5035919050565b80151581146118ad57600080fd5b6000806040838503121561193357600080fd5b823561193e81611898565b9150602083013561194e81611912565b809150509250929050565b6000806000806080858703121561196f57600080fd5b843561197a81611898565b935060208501359250604085013561199181611912565b915060608501356119a181611912565b939692955090935050565b6000602082840312156119be57600080fd5b5051919050565b6000602082840312156119d757600080fd5b815161177c81611898565b600060208083526000845481600182811c915080831680611a0457607f831692505b858310811415611a2257634e487b7160e01b85526022600452602485fd5b878601838152602001818015611a3f5760018114611a5057611a7b565b60ff19861682528782019650611a7b565b60008b81526020902060005b86811015611a7557815484820152908501908901611a5c565b83019750505b50949998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611ab257611ab2611a8a565b500390565b60008219821115611aca57611aca611a8a565b500190565b6000600019821415611ae357611ae3611a8a565b5060010190565b6000825160005b81811015611b0b5760208186018101518583015201611af1565b81811115611b1a576000828501525b509190910192915050565b600060208284031215611b3757600080fd5b815161177c8161191256fea264697066735822122034c895e2c49166b1bd4b678d829c7dd5b176eb85bc69e1c3f338a3c4968f1de464736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,bool)": {
        "params": {
          "_rebasing": "bool",
          "_to": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "forfeit()": {
        "returns": {
          "_0": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "rebase()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "setDistributor(address)": {
        "params": {
          "_distributor": "address"
        }
      },
      "setWarmupLength(uint256)": {
        "params": {
          "_warmupPeriod": "uint"
        }
      },
      "stake(address,uint256,bool,bool)": {
        "params": {
          "_amount": "uint",
          "_claim": "bool",
          "_rebasing": "bool",
          "_to": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "unstake(address,uint256,bool,bool)": {
        "params": {
          "_amount": "uint",
          "_rebasing": "bool",
          "_to": "address",
          "_trigger": "bool"
        },
        "returns": {
          "amount_": "uint"
        }
      },
      "unwrap(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        },
        "returns": {
          "sBalance_": "uint"
        }
      },
      "wrap(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        },
        "returns": {
          "gBalance_": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,bool)": {
        "notice": "retrieve stake from warmup"
      },
      "forfeit()": {
        "notice": "forfeit stake and retrieve REQ"
      },
      "index()": {
        "notice": "returns the sREQ index, which tracks rebase growth"
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "secondsToNextEpoch()": {
        "notice": "seconds until the next epoch begins"
      },
      "setDistributor(address)": {
        "notice": "sets the contract address for LP staking"
      },
      "setWarmupLength(uint256)": {
        "notice": "set warmup period for new stakers"
      },
      "stake(address,uint256,bool,bool)": {
        "notice": "stake REQ to enter warmup"
      },
      "supplyInWarmup()": {
        "notice": "total supply in warmup"
      },
      "toggleLock()": {
        "notice": "prevent new deposits or claims from ext. address (protection from malicious activity)"
      },
      "unstake(address,uint256,bool,bool)": {
        "notice": "redeem sREQ for REQs"
      },
      "unwrap(address,uint256)": {
        "notice": "convert _amount gREQ into sBalance_ sREQ"
      },
      "wrap(address,uint256)": {
        "notice": "convert _amount sREQ into gBalance_ gREQ"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11104,
        "contract": "contracts/Staking.sol:Staking",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11107,
        "contract": "contracts/Staking.sol:Staking",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAuthority)7440"
      },
      {
        "astId": 3673,
        "contract": "contracts/Staking.sol:Staking",
        "label": "epoch",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Epoch)3652_storage"
      },
      {
        "astId": 3676,
        "contract": "contracts/Staking.sol:Staking",
        "label": "distributor",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IDistributor)7689"
      },
      {
        "astId": 3681,
        "contract": "contracts/Staking.sol:Staking",
        "label": "warmupInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Claim)3661_storage)"
      },
      {
        "astId": 3683,
        "contract": "contracts/Staking.sol:Staking",
        "label": "warmupPeriod",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3685,
        "contract": "contracts/Staking.sol:Staking",
        "label": "gonsInWarmup",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuthority)7440": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IDistributor)7689": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Claim)3661_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)3661_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)3661_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Claim",
        "members": [
          {
            "astId": 3654,
            "contract": "contracts/Staking.sol:Staking",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3656,
            "contract": "contracts/Staking.sol:Staking",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3658,
            "contract": "contracts/Staking.sol:Staking",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3660,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Epoch)3652_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Epoch",
        "members": [
          {
            "astId": 3645,
            "contract": "contracts/Staking.sol:Staking",
            "label": "length",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3647,
            "contract": "contracts/Staking.sol:Staking",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3649,
            "contract": "contracts/Staking.sol:Staking",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3651,
            "contract": "contracts/Staking.sol:Staking",
            "label": "distribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}