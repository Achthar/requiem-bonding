/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestPair, TestPairInterface } from "../TestPair";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_weight0",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_weight1",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getParameters",
    outputs: [
      {
        internalType: "uint32",
        name: "_tokenWeight0",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_tokenWeight1",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_swapFee",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_amp",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "reserve0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserve1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vReserve0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vReserve1",
            type: "uint256",
          },
        ],
        internalType: "struct IWeightedPair.ReserveData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveData",
    outputs: [
      {
        internalType: "uint256",
        name: "reserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserve1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vReserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vReserve1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reserves0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserves1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_vReserves0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_vReserves1",
        type: "uint256",
      },
    ],
    name: "setReserves",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weight0",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weight1",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104d23803806104d283398101604081905261002f916100f8565b6000948555600580546001600160a01b0319166001600160a01b0395861617905560068054939094166001600160c01b031990931692909217600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b92909116919091021790556040805160808101825282815260208101839052908101829052606001819052600181905560028190556003819055600455610156565b80516001600160a01b03811681146100df57600080fd5b919050565b805163ffffffff811681146100df57600080fd5b600080600080600060a0868803121561011057600080fd5b85519450610120602087016100c8565b935061012e604087016100c8565b925061013c606087016100e4565b915061014a608087016100e4565b90509295509295909350565b61036d806101656000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806345a9c05611610076578063a5ea11da1161005b578063a5ea11da146101ff578063d21220a714610261578063dd5315181461028157600080fd5b806345a9c0561461017e5780634f73bdb2146101bb57600080fd5b80630902f1ac146100a85780630dfe1681146100ec57806318160ddd14610131578063289cc9c814610148575b600080fd5b6100b06102ad565b6040516100e391908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b60055461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e3565b61013a60005481565b6040519081526020016100e3565b60015460025460035460045461015e9392919084565b6040805194855260208501939093529183015260608201526080016100e3565b6006546101a69074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016100e3565b6101fd6101c9366004610305565b6040805160808101825285815260208101859052908101839052606001819052600193909355600291909155600355600455565b005b6006546040805163ffffffff7401000000000000000000000000000000000000000084048116825278010000000000000000000000000000000000000000000000009093049092166020830152600090820181905260608201526080016100e3565b60065461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b6006546101a6907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6102d86040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526001548152600254602082015260035491810191909152600454606082015290565b6000806000806080858703121561031b57600080fd5b505082359460208401359450604084013593606001359250905056fea26469706673582212203418025795caf1b4cf21045282494c40059d86e9685c441ac11b4bb7e1596c0064736f6c634300080d0033";

export class TestPair__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _supply: BigNumberish,
    _token0: string,
    _token1: string,
    _weight0: BigNumberish,
    _weight1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPair> {
    return super.deploy(
      _supply,
      _token0,
      _token1,
      _weight0,
      _weight1,
      overrides || {}
    ) as Promise<TestPair>;
  }
  getDeployTransaction(
    _supply: BigNumberish,
    _token0: string,
    _token1: string,
    _weight0: BigNumberish,
    _weight1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _supply,
      _token0,
      _token1,
      _weight0,
      _weight1,
      overrides || {}
    );
  }
  attach(address: string): TestPair {
    return super.attach(address) as TestPair;
  }
  connect(signer: Signer): TestPair__factory {
    return super.connect(signer) as TestPair__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPairInterface {
    return new utils.Interface(_abi) as TestPairInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPair {
    return new Contract(address, _abi, signerOrProvider) as TestPair;
  }
}
