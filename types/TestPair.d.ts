/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestPairInterface extends ethers.utils.Interface {
  functions: {
    "getParameters()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "reserveData()": FunctionFragment;
    "setReserves(uint256,uint256,uint256,uint256)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "weight0()": FunctionFragment;
    "weight1()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReserves",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weight0", values?: undefined): string;
  encodeFunctionData(functionFragment: "weight1", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weight0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weight1", data: BytesLike): Result;

  events: {};
}

export class TestPair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestPairInterface;

  functions: {
    getParameters(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        _tokenWeight0: number;
        _tokenWeight1: number;
        _swapFee: number;
        _amp: number;
      }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          reserve0: BigNumber;
          reserve1: BigNumber;
          vReserve0: BigNumber;
          vReserve1: BigNumber;
        }
      ]
    >;

    reserveData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserve0: BigNumber;
        reserve1: BigNumber;
        vReserve0: BigNumber;
        vReserve1: BigNumber;
      }
    >;

    setReserves(
      _reserves0: BigNumberish,
      _reserves1: BigNumberish,
      _vReserves0: BigNumberish,
      _vReserves1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    weight0(overrides?: CallOverrides): Promise<[number]>;

    weight1(overrides?: CallOverrides): Promise<[number]>;
  };

  getParameters(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      _tokenWeight0: number;
      _tokenWeight1: number;
      _swapFee: number;
      _amp: number;
    }
  >;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      reserve0: BigNumber;
      reserve1: BigNumber;
      vReserve0: BigNumber;
      vReserve1: BigNumber;
    }
  >;

  reserveData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      reserve0: BigNumber;
      reserve1: BigNumber;
      vReserve0: BigNumber;
      vReserve1: BigNumber;
    }
  >;

  setReserves(
    _reserves0: BigNumberish,
    _reserves1: BigNumberish,
    _vReserves0: BigNumberish,
    _vReserves1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  weight0(overrides?: CallOverrides): Promise<number>;

  weight1(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getParameters(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        _tokenWeight0: number;
        _tokenWeight1: number;
        _swapFee: number;
        _amp: number;
      }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserve0: BigNumber;
        reserve1: BigNumber;
        vReserve0: BigNumber;
        vReserve1: BigNumber;
      }
    >;

    reserveData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserve0: BigNumber;
        reserve1: BigNumber;
        vReserve0: BigNumber;
        vReserve1: BigNumber;
      }
    >;

    setReserves(
      _reserves0: BigNumberish,
      _reserves1: BigNumberish,
      _vReserves0: BigNumberish,
      _vReserves1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    weight0(overrides?: CallOverrides): Promise<number>;

    weight1(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    getParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    reserveData(overrides?: CallOverrides): Promise<BigNumber>;

    setReserves(
      _reserves0: BigNumberish,
      _reserves1: BigNumberish,
      _vReserves0: BigNumberish,
      _vReserves1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    weight0(overrides?: CallOverrides): Promise<BigNumber>;

    weight1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReserves(
      _reserves0: BigNumberish,
      _reserves1: BigNumberish,
      _vReserves0: BigNumberish,
      _vReserves1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
